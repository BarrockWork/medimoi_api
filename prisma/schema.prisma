// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TreatmentPeriodicity {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  nameSlug   String      @unique @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  isActive   Boolean     @default(true)
  Treatments Treatment[] @relation(name: "TreatmentToTreatmentPeriodicity")
}

model Treatment {
  id                       Int                  @id @default(autoincrement())
  treatment_periodicity_id Int
  TreatmentPeriodicity     TreatmentPeriodicity @relation(name: "TreatmentToTreatmentPeriodicity", fields: [treatment_periodicity_id], references: [id])
  user_id                  Int
  User                     User                 @relation(name: "TreatmentToUser", fields: [user_id], references: [id])
  name                     String               @db.VarChar(255)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime?            @updatedAt
  startedAt                DateTime?
  finishedAt               DateTime?
  isActive                 Boolean              @default(true)
  TreatmentMedias          TreatmentMedia[]     @relation(name: "TreatmentToTreatmentMedia")
  TreatmentDrugs           TreatmentDrug[]      @relation(name: "TreatmentToTreatmentDrug")
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  nameSlug      String        @unique @db.VarChar(50)
  siret         String        @db.VarChar(50)
  tva           String        @db.VarChar(50)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  isActive      Boolean       @default(true)
  UserCompanies UserCompany[] @relation(name: "CompanyToUserCompany")
}

model UserCompany {
  id         Int       @id @default(autoincrement())
  company_id Int
  Company    Company   @relation(name: "CompanyToUserCompany", fields: [company_id], references: [id])
  user_id    Int       @unique
  User       User      @relation(name: "UserToUserCompany", fields: [user_id], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  isActive   Boolean   @default(true)
}

model UserType {
  id        Int       @id @default(autoincrement())
  name      String
  nameSlug  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Users     User[]    @relation(name: "UserToUserType")
}

model User {
  id                    Int                    @id @default(autoincrement())
  user_type_id          Int
  UserType              UserType               @relation(name: "UserToUserType", fields: [user_type_id], references: [id])
  firstName             String                 @db.VarChar(50)
  lastName              String                 @db.VarChar(50)
  age                   Int
  email                 String                 @unique @db.VarChar(50)
  password              String                 @db.VarChar(255)
  cellphone             String                 @db.VarChar(50)
  homephone             String                 @db.VarChar(50)
  workphone             String?                @db.VarChar(50)
  role                  String
  lastConnection        DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  isActive              Boolean?               @default(true)
  Addresses             Address[]              @relation(name: "AddressToUser")
  Treatments            Treatment[]            @relation(name: "TreatmentToUser")
  UserCompany           UserCompany?           @relation(name: "UserToUserCompany")
  Contacts              Contact[]              @relation(name: "ContactToUser")
  UserNotificationTypes UserNotificationType[] @relation(name: "UserToUserNotificationType")
}

model Address {
  id                   Int             @id @default(autoincrement())
  user_id              Int
  User                 User            @relation(name: "AddressToUser", fields: [user_id], references: [id])
  numberRoad           Int
  streetName           String          @db.VarChar(50)
  address_road_type_id Int
  AddressRoadType      AddressRoadType @relation(name: "AddressToAddressRoadType", fields: [address_road_type_id], references: [id])
  additionnalAddress   String?         @db.VarChar(255)
  zipcode              String          @db.VarChar(10)
  city                 String          @db.VarChar(50)
  region               String          @db.VarChar(50)
  country              String          @db.VarChar(50)
  title                String          @db.VarChar(50)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime?       @updatedAt
}

model Contact {
  id              Int         @id @default(autoincrement())
  user_id         Int
  User            User        @relation(name: "ContactToUser", fields: [user_id], references: [id])
  contact_type_id Int
  ContactType     ContactType @relation(name: "ContactToContactType", fields: [contact_type_id], references: [id])
  firstName       String      @db.VarChar(50)
  lastName        String      @db.VarChar(50)
  phoneNumber     String      @db.VarChar(50)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt
  isActive        Boolean     @default(true)
}

model UserNotificationType {
  id                     Int                   @id @default(autoincrement())
  user_id                Int
  User                   User                  @relation(name: "UserToUserNotificationType", fields: [user_id], references: [id])
  notification_type_id   Int
  NotificationType       NotificationType      @relation(name: "NotificationTypeToUserNotificationType", fields: [notification_type_id], references: [id])
  createdAt              DateTime              @default(now())
  updatedAt              DateTime?             @updatedAt
  isActive               Boolean               @default(true)
  NotificationsHistories NotificationHistory[] @relation(name: "NotificationHistoryToUserNotificationType")
}

model ContactType {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  nameSlug  String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean   @default(true)
  Contacts  Contact[] @relation(name: "ContactToContactType")
}

model TreatmentMedia {
  id           Int       @id @default(autoincrement())
  treatment_id Int
  Treatment    Treatment @relation(name: "TreatmentToTreatmentMedia", fields: [treatment_id], references: [id])
  originalName String    @db.VarChar(255)
  fileName     String    @db.VarChar(255) @unique
  fileSize     Int
  filePath     String    @db.Text
  mimeType     String    @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  isActive     Boolean   @default(true)
}

model TreatmentDrug {
  id           Int       @id @default(autoincrement())
  treatment_id Int
  Treatment    Treatment @relation(name: "TreatmentToTreatmentDrug", fields: [treatment_id], references: [id])
  drug_id      Int
  Drug         Drug      @relation(name: "DrugToTreatmentDrug", fields: [drug_id], references: [id])
  comments     String?
  isActive     Boolean   @default(true)
}

model DrugLevel {
  id          Int       @id @default(autoincrement())
  level       Int
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  Drugs       Drug[]    @relation(name: "DrugToDrugLevel")
}

model Drug {
  id                        Int                   @id @default(autoincrement())
  drug_level_id             Int
  DrugLevel                 DrugLevel             @relation(name: "DrugToDrugLevel", fields: [drug_level_id], references: [id])
  drug_type_id              Int
  DrugType                  DrugType              @relation(name: "DrugToDrugType", fields: [drug_type_id], references: [id])
  medical_administration_id Int
  MedicalAdministration     MedicalAdministration @relation(name: "DrugToMedicalAdministration", fields: [medical_administration_id], references: [id])
  name                      String                @db.VarChar(255)
  nameSlug                  String                @unique @db.VarChar(255)
  description               String                @db.Text
  isPrescription            Boolean               @default(false)
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime?             @updatedAt
  isActive                  Boolean               @default(true)
  TreatmentDrugs            TreatmentDrug[]       @relation(name: "DrugToTreatmentDrug")
}

model DrugType {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  nameSlug    String    @unique @db.VarChar(50)
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  Drugs       Drug[]    @relation(name: "DrugToDrugType")
}

model MedicalAdministration {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  nameSlug  String    @db.VarChar(255) @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean   @default(true)
  Drugs     Drug[]    @relation(name: "DrugToMedicalAdministration")
}

model NotificationType {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @db.VarChar(50)
  nameSlug              String                 @unique @db.VarChar(50)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  isActive              Boolean                @default(true)
  UserNotificationTypes UserNotificationType[] @relation(name: "NotificationTypeToUserNotificationType")
}

model NotificationHistory {
  id                        Int                  @id @default(autoincrement())
  user_notification_type_id Int
  UserNotificationType      UserNotificationType @relation(name: "NotificationHistoryToUserNotificationType", fields: [user_notification_type_id], references: [id])
  createdAt                 DateTime             @default(now())
}

model AddressRoadType {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  nameSlug  String      @unique @db.VarChar(50)
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  Addresses Address[]   @relation(name: "AddressToAddressRoadType")
  KhysInfo  KhysInfo[]  @relation(name: "KhysInfoToAddressRoadType")
}

model DiseaseType {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  nameSlug    String    @unique @db.VarChar(100)
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  Diseases    Disease[] @relation(name: "DiseaseToDiseaseType")
}

model Disease {
  id               Int         @id @default(autoincrement())
  disease_type_id  Int
  DiseaseType      DiseaseType @relation(name: "DiseaseToDiseaseType", fields: [disease_type_id], references: [id])
  name             String      @db.VarChar(255)
  nameSlug         String      @unique @db.VarChar(255)
  description      String      @db.Text
  incubationPeriod String      @db.Text
  transmitting     String      @db.VarChar(255)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
  isActive         Boolean     @default(true)
}

model KhysInfo {
  id                    Int               @id @default(autoincrement())
  name                  String            @db.VarChar(50)
  nameSlug              String            @db.VarChar(50) @unique
  phoneNumber           String            @db.VarChar(50)
  email                 String            @db.VarChar(50) @unique
  address_road_type_id  Int
  AddressRoadType       AddressRoadType   @relation(name: "KhysInfoToAddressRoadType", fields: [address_road_type_id], references: [id])
  numberRoad            Int
  streetName            String            @db.VarChar(50)
  zipcode               String            @db.VarChar(10)
  city                  String            @db.VarChar(50)
  region                String            @db.VarChar(50)
  country               String            @db.VarChar(50)
  siret                 String            @db.VarChar(50)
  tva                   String            @db.VarChar(50)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime?         @updatedAt
}

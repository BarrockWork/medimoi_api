// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
	provider = "mysql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
}
model ContactType {
	id Int @id @default(autoincrement())
	name String @db.VarChar(50)
	nameSlug String @unique @db.VarChar(50)
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	Contacts Contact[] @relation(name: "ContactToContactType")
}
model Contact {
	id Int @id @default(autoincrement())
	contact_type_id Int 
	ContactType ContactType @relation(name: "ContactToContactType", fields: [contact_type_id], references: [id])
	firstName String @db.VarChar(50)
	lastName String @db.VarChar(50)
	phoneNumber String @db.VarChar(50)
	user_id Int 
	User User @relation(name: "ContactToUser", fields: [user_id], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
}
model User {
	id Int @id
	Contacts Contact[] @relation(name: "ContactToUser")
	Treatments Treatment[] @relation(name: "TreatmentToUser")
	UserNotificationTypes UserNotificationType[] @relation(name: "UserToUserNotificationType")
	Addresses Address[] @relation(name: "AddressToUser")
}
model Treatment {
	id Int @id @default(autoincrement())
	name String @db.VarChar(255)
	treatment_periodicity_id Int 
	TreatmentPeriodicity TreatmentPeriodicity @relation(name: "TreatmentToTreatmentPeriodicity", fields: [treatment_periodicity_id], references: [id])
	user_id Int 
	User User @relation(name: "TreatmentToUser", fields: [user_id], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	startedAt DateTime 
	finishedAt DateTime? 
	isActive Boolean @default(true)
	TreatmentMedias TreatmentMedia[] @relation(name: "TreatmentToTreatmentMedia")
	TreatmentDrugs TreatmentDrug[] @relation(name: "TreatmentToTreatmentDrug")
}
model TreatmentPeriodicity {
	id Int @id
	Treatments Treatment[] @relation(name: "TreatmentToTreatmentPeriodicity")
}
model TreatmentMedia {
	id Int @id
	treatment_id Int 
	Treatment Treatment @relation(name: "TreatmentToTreatmentMedia", fields: [treatment_id], references: [id])
}
model TreatmentDrug {
	id Int @id @default(autoincrement())
	treatment_id Int 
	Treatment Treatment @relation(name: "TreatmentToTreatmentDrug", fields: [treatment_id], references: [id])
	drug_id Int 
	Drug Drug @relation(name: "DrugToTreatmentDrug", fields: [drug_id], references: [id])
	comments String 
	isActive Boolean @default(true)
}
model DrugLevel {
	id Int @id @default(autoincrement())
	level Int 
	description String 
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	Drugs Drug[] @relation(name: "DrugToDrugLevel")
}
model Drug {
	id Int @id @default(autoincrement())
	drug_level_id Int 
	DrugLevel DrugLevel @relation(name: "DrugToDrugLevel", fields: [drug_level_id], references: [id])
	drug_type_id Int 
	DrugType DrugType @relation(name: "DrugToDrugType", fields: [drug_type_id], references: [id])
	medical_administration_id Int 
	MedicalAdministration MedicalAdministration @relation(name: "DrugToMedicalAdministration", fields: [medical_administration_id], references: [id])
	name String @db.VarChar(255)
	description String 
	isPrescription Boolean @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	TreatmentDrugs TreatmentDrug[] @relation(name: "DrugToTreatmentDrug")
}
model DrugType {
	id Int @id @default(autoincrement())
	name String @db.VarChar(255)
	nameSlug String @unique @db.VarChar(50)
	description String 
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	Drugs Drug[] @relation(name: "DrugToDrugType")
}
model MedicalAdministration {
	id Int @id @default(autoincrement())
	name String 
	nameSlug String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	Drugs Drug[] @relation(name: "DrugToMedicalAdministration")
}
model UserNotificationType {
	id Int @id @default(autoincrement())
	notifcation_type_id Int 
	NotifcationType NotifcationType @relation(name: "NotifcationTypeToUserNotificationType", fields: [notifcation_type_id], references: [id])
	userId Int 
	User User @relation(name: "UserToUserNotificationType", fields: [userId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	NotificationsHistories NotificationHistory[] @relation(name: "NotificationHistoryToUserNotificationType")
}
model NotifcationType {
	id Int @id
	UserNotificationTypes UserNotificationType[] @relation(name: "NotifcationTypeToUserNotificationType")
}
model NotificationHistory {
	id Int @id @default(autoincrement())
	user_notification_type_id Int 
	UserNotificationType UserNotificationType @relation(name: "NotificationHistoryToUserNotificationType", fields: [user_notification_type_id], references: [id])
	createdAt DateTime @default(now())
}
model AddressRoadType {
	id Int @id @default(autoincrement())
	name String @db.VarChar(50)
	nameSlug String @unique @db.VarChar(50)
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	Addresses Address[] @relation(name: "AddressToAddressRoadType")
}
model Address {
	id Int @id @default(autoincrement())
	address_road_type_id Int 
	AddressRoadType AddressRoadType @relation(name: "AddressToAddressRoadType", fields: [address_road_type_id], references: [id])
	numberRoad Int 
	name String @db.VarChar(50)
	user_id Int 
	User User @relation(name: "AddressToUser", fields: [user_id], references: [id])
	additionnalAddress String @db.VarChar(255)
	zipcode String @db.VarChar(10)
	city String @db.VarChar(50)
	region String @db.VarChar(50)
	country String @db.VarChar(50)
	title String @db.VarChar(50)
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
}
model DiseaseType {
	id Int @id @default(autoincrement())
	name String @db.VarChar(255)
	nameSlug String @unique @db.VarChar(255)
	description String 
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
	Diseases Disease[] @relation(name: "DiseaseToDiseaseType")
}
model Disease {
	id Int @id @default(autoincrement())
	disease_type_id Int 
	DiseaseType DiseaseType @relation(name: "DiseaseToDiseaseType", fields: [disease_type_id], references: [id])
	name String @db.VarChar(255)
	nameSlug String @unique @db.VarChar(255)
	description String 
	incubationPeriod String 
	transmitting String @db.VarChar(255)
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	isActive Boolean @default(true)
}